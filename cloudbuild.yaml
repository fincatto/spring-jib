substitutions:
  _DF_ZONE: us-central1-a
  _DF_CLUSTER: spring-app-cluster

steps:
  - #step 1: Uses the Cloud Builder Maven image since it is cached.
    name: gcr.io/cloud-builders/mvn
    dir: /root
    entrypoint: bash
    args:
      - -c
      - # Links the Docker config to /root/.docker/config.json so Jib picks it up.
        # Note that this is only a temporary workaround.
        # See https://github.com/GoogleContainerTools/jib/pull/1479.
        |
        mkdir .docker &&
        ln -s $$HOME/.docker/config.json .docker/config.json

    volumes:
      - name: user.home
        path: /root

  - #step 2: Uses the Cloud Builder Maven image.
    name: gcr.io/cloud-builders/mvn
    args:
      # Compiles the application.
      - compile

      # Runs the Jib build by using the latest version of the plugin.
      # To use a specific version, configure the plugin in the pom.xml.
      - com.google.cloud.tools:jib-maven-plugin:build
      - -X

      # Sets the target image reference to push to.
      - -Dimage=gcr.io/${PROJECT_ID}/app
      - -Dtags=${BUILD_ID},teste1,teste2

    volumes:
      - name: user.home
        path: /root

  #step 3: Apply kubernetes config files
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=spring-app-cluster'

  #step 4: Deploy app
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'set',
      'image',
      'deployment',
      'spring-jib-app',
      'spring-jib-app=gcr.io/$PROJECT_ID/app:$BUILD_ID'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=spring-app-cluster'

images: [
  'gcr.io/$PROJECT_ID/app:$BUILD_ID',
  'gcr.io/$PROJECT_ID/app:latest'
]